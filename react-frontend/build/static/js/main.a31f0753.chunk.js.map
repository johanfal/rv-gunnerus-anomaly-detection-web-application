{"version":3,"sources":["components/About.js","components/ChartVisuals.js","components/Chart.js","components/ChartDashboard.js","components/Header.js","components/ModelSpecifications.js","components/Upload.js","components/Startpage.js","App.js","index.js"],"names":["About","className","href","target","rel","id","src","alt","style","textAlign","fontSize","SERIES_TYPES","ChartVisuals","elRef","margin","top","right","bottom","left","responsiveHeight","responsiveWidth","xScale","d3","yScale","seriesDict","toggleSeries","series","hidden","ref","classed","width","height","classList","this","undefined","outerWidth","offsetWidth","outerHeight","offsetHeight","draw","svg","append","attr","group","range","xAxisRef","yAxisRef","name","type","fill","stroke","strokeWidth","Error","includes","data","adjustAxes","adjustDimensions","updateAreaSeries","updatePredictionSeries","updateLineSeries","datum","transition","duration","ease","x","d","timestamp","y","value","pred","y0","y1","pred_bool","minValue","maxValue","minActual","minPred","Math","floor","min","maxActual","maxPred","ceil","max","domain","call","ticks","tickFormat","Chart","props","setState","anomToggled","state","predToggled","toggle","tsChart","updateThreshold","event","preventDefault","thresholdValue","thresholdField","threshold","render","wrapper","lastTimeStr","connected","sensorId","toUpperCase","values","signal","error","seriesList","map","key","labelClass","onClick","label","length","toFixed","lastDateStr","border","color","backgroundColor","marginBottom","onSubmit","autoComplete","step","push","ofx","samples","D3TsChart","createRef","bind","lastDatetime","node","current","init","getElementsByClassName","addSeries","attachFocusWatcher","_prev_props","_prevState","updateChart","window","focused","onblur","onfocus","xTicks","slice","highestValueInView","p","highestPredInView","anomalyLine","anomaly","setSeriesData","nextProps","prevState","time","console","log","datetime","Date","parse","dateStr","toLocaleDateString","timeStr","toLocaleTimeString","pointsToStore","lastTimestamp","newValues","abs","React","Component","ChartDashboard","connect","socket","io","system","onReload","performance","navigation","fetch","setSignalSelection","options","outputs","allSignals","Set","inputs","addChart","sensor","addNewCharts","newlySelected","selectedItems","sig","isSignalToPredict","sampleFiles","deleteDeselectedCharts","newlyDeselected","getValues","selected","on","checkReading","disconnect","storeReading","chartItems","setUpdatedState","updateConnectionStatus","thread_created","timesteps","modelTimesteps","strInputs","join","strOutputs","then","response","json","_prevProps","updateState","added","filter","deleted","noSignals","Object","keys","onSelectedChanged","overrideStrings","selectSomeItems","allItemsAreSelected","selectAll","disableSearch","isLoading","Header","location","reload","about","dashboard","ModelSpecifications","onSelect","maxSelect","alert","sendSystemUpdate","onSelectedInput","selectedInputs","sendInputsUpdate","onSelectedOutput","selectedOutputs","sendOutputsUpdate","onContinue","modelSelections","selectedSystem","sendModelSelections","useSampleFiles","optionsEnabled","optionsDisabled","entries","systems","hasData","disabled","concat","reachedSystemMax","reachedInputMax","inputSignals","reachedOutputMax","outputSignals","hasLoaded","allowContinue","hasSelectAll","sendUpdate","contBtn","SignalSpecifications","signalMax","SIGNAL_MAX","signals","typeStr","typeStrTitle","charAt","baseStyle","position","display","verticalAlign","padding","borderWidth","borderRadius","borderColor","borderStyle","outline","activeStyle","re","Upload","str_format","format","replace","useState","uploaded","setUploaded","filename","setFilename","fileProperties","setFileProperties","metadataReceived","setMetadataReceived","onDrop","useCallback","acceptedFiles","rejectedFiles","resetAll","errors","code","parseInt","MAX_SIZE","rejectedExtension","exec","file","FormData","fileExtension","sendFilename","onModelUpload","onScalerUpload","nl","fl","substring","resetProps","method","body","fileprops","modelProperties","inp","out","sendModelProperties","input","output","features","useEffect","useDropzone","accept","minSize","maxSize","getRootProps","getInputProps","isDragActive","useMemo","Startpage","onModelComplete","settingsComplete","onFileUploaded","modelFilename","scalerFilename","onModelProperties","modelProps","setSampleBool","resetUploadStates","onSystemUpdate","onInputsUpdate","onOutputsUpdate","onAboutClick","showSelectionParameters","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a31f0753.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const About = () => {\r\n  return (\r\n    <div className=\"about-container\">\r\n      This application allows users to upload and test machine learning\r\n      models, developed sequentially through{\" \"}\r\n      <a\r\n        className=\"about-link\"\r\n        href=\"https://www.tensorflow.org/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        TensorFlow\r\n      </a>{\" \"}\r\n      and{\" \"}\r\n      <a\r\n        className=\"about-link\"\r\n        href=\"https://keras.io/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Keras\r\n      </a>\r\n      , aimed at anomaly detection for predictive maintenance. After uploading\r\n      the desired model (and corresponding scaler) for testing, the user can\r\n      view data streams in real-time for available signals of a selected\r\n      system transmitting data. For predicted signals, the user can set\r\n      threshold values for anomaly detection, and successive values exceeding\r\n      the given thresholds are presented visually as anomalies.\r\n      <br />\r\n      <br />\r\n      Currently, NTNU's research vessel, R/V Gunnerus, is used as a data\r\n      source for implementing anomaly detection models and subsequent testing\r\n      in this application. At the time of launch, the application database\r\n      only supports one system aboard the vessel, namely the Nogva main\r\n      engines. Historical data is supplied from the server from an interval\r\n      where a simulated fault was triggered, causing the exhaust temperatures\r\n      to rise. Although the current implementation uses historical data, the\r\n      application is easily modified to receive data from a server updating in\r\n      real-time. In addition to this web application, a modeling API was\r\n      developed, providing the framework for developing recurrent neural\r\n      network (RNN) models.\r\n      <br />\r\n      <br />\r\n      The application was made as part of a Master's assignment in marine\r\n      technology at the Norwegian University of Science and Technology, NTNU.\r\n      The application intends to serve as a tool used in the education of\r\n      engineering students, and is especially related to the development and\r\n      use of digital twins in maritime applications at the Department of\r\n      Marine Technology.\r\n      <br />\r\n      <br />\r\n      <img\r\n        id=\"gunnerus-rendering\"\r\n        src=\"./img/gunnerus_rendering_green.png\"\r\n        alt=\"Gunnerus digital twin rendering\"\r\n      ></img>\r\n      <div style={{ textAlign: \"center\", fontSize: \"16px\" }}>\r\n        <em>Rendering of R/V Gunnerus and a virtual twin</em>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","/*\r\nThis component was largely developed by Hatem Hassan (2019), and the source\r\nrepository can be found on GitHub at:\r\nhttps://github.com/iammowgoud/Peak-Detection-Visualization/blob/master/src/d3-helpers/d3-ts-chart.js\r\n*/\r\n\r\nimport * as d3 from \"d3\";\r\n\r\nconst SERIES_TYPES = [\"LINE\", \"AREA\"];\r\nconst TRANSITION_DURATION = 100;\r\nconst MAX_Y_TICKS = 6;\r\n\r\nexport class ChartVisuals {\r\n  // HTML Element References\r\n  elRef = null; // SVG Parent container element ref\r\n  svg; // Main SVG container with margins\r\n  group; // Inner box group without margins\r\n\r\n  // Layout config\r\n  margin = { top: 10, right: 20, bottom: 30, left: 50 };\r\n\r\n  outerWidth;\r\n  outerHeight;\r\n\r\n  // responsive flags will be only true if you don't set width or height in config\r\n  responsiveHeight = false;\r\n  responsiveWidth = false;\r\n\r\n  // Axes\r\n  xScale = d3.scaleTime();\r\n  yScale = d3.scaleLinear();\r\n  xAxisRef;\r\n  yAxisRef;\r\n\r\n  // Series -- used to select and update series\r\n  seriesDict = {\r\n    // \"seriesname\": { type: SERIES_TYPES, ref: d3 object}\r\n  };\r\n\r\n  /**\r\n   * @param Config {\r\n   *    elRef: container Element reference,\r\n   *    width,\r\n   *    height,\r\n   *    classList: { svg, group } //strings\r\n   *    }\r\n   */\r\n  init({ elRef, width, height, classList }) {\r\n    this.elRef = elRef;\r\n\r\n    // If no width/height specified, SVG will inherit container element dimensions\r\n    if (width === undefined) this.responsiveWidth = true;\r\n    if (height === undefined) this.responsiveHeight = true;\r\n\r\n    this.outerWidth = width || this.elRef.offsetWidth;\r\n    this.outerHeight = height || this.elRef.offsetHeight;\r\n\r\n    this.classList = classList || {};\r\n\r\n    this.draw();\r\n  }\r\n\r\n  draw() {\r\n    // Main SVG\r\n    this.svg = d3\r\n      .select(this.elRef)\r\n      .append(\"svg\")\r\n      .attr(\"width\", this.outerWidth)\r\n      .attr(\"height\", this.outerHeight)\r\n      .classed(this.classList.svg || null, true);\r\n\r\n    //Inner box group (deducting margins)\r\n    this.group = this.svg\r\n      .append(\"g\")\r\n      .attr(\"width\", this.outerWidth - this.margin.left - this.margin.right)\r\n      .attr(\"height\", this.outerHeight - this.margin.top - this.margin.bottom)\r\n      .attr(\r\n        \"transform\",\r\n        `translate(${this.margin.left} , ${this.margin.top})`\r\n      )\r\n      .classed(this.classList.group || null, true);\r\n\r\n    // X Axis init\r\n    this.xScale.range([\r\n      0,\r\n      this.outerWidth - this.margin.left - this.margin.right,\r\n    ]);\r\n    this.xAxisRef = this.group\r\n      .append(\"g\")\r\n      .attr(\r\n        \"transform\",\r\n        `translate(0,${this.outerHeight - this.margin.bottom})`\r\n      )\r\n      .classed(\"x-axis\", true);\r\n\r\n    // Y Axis init\r\n    this.yScale.range([this.outerHeight - this.margin.bottom, 0]);\r\n    this.yAxisRef = this.group\r\n      .append(\"g\")\r\n      .attr(\"transform\", \"translate(0, 0)\")\r\n      .classed(\"y-axis\", true);\r\n  }\r\n\r\n  addSeries({ name, type, fill, stroke, strokeWidth, id }) {\r\n    if (this.seriesDict[name]) throw new Error(\"Series name must be unique!\");\r\n    if (!SERIES_TYPES.includes(type))\r\n      throw new Error(\"Series type not supported!\");\r\n\r\n    this.seriesDict[name] = {\r\n      type,\r\n      ref: this.group\r\n        .append(\"path\")\r\n        .attr(\"fill\", fill || \"none\")\r\n        .attr(\"stroke\", stroke || \"black\")\r\n        .attr(\"stroke-width\", strokeWidth || 2)\r\n        .classed(\"series\", true)\r\n        .classed(\"hidden\", false),\r\n    };\r\n  }\r\n\r\n  setSeriesData(name, data, adjustAxes = true) {\r\n    // if (!window.focused) return;\r\n    const series = this.seriesDict[name];\r\n\r\n    this.adjustDimensions();\r\n\r\n    if (adjustAxes) this.adjustAxes(data);\r\n\r\n    switch (series.type) {\r\n      case \"AREA\":\r\n        this.updateAreaSeries(series, data);\r\n        break;\r\n      case \"LINE\":\r\n      default:\r\n        if (name === \"prediction\") {\r\n          this.updatePredictionSeries(series, data);\r\n        } else {\r\n          this.updateLineSeries(series, data);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  updateLineSeries(series, data) {\r\n    series.ref\r\n      .datum(data)\r\n      .transition()\r\n      .duration(TRANSITION_DURATION)\r\n      .ease(d3.easeQuadIn)\r\n      .attr(\r\n        \"d\",\r\n        d3\r\n          .line()\r\n          .x((d) => {\r\n            return this.xScale(d.timestamp);\r\n          })\r\n          .y((d) => {\r\n            return this.yScale(d.value);\r\n          })\r\n      );\r\n  }\r\n\r\n  updatePredictionSeries(series, data) {\r\n    series.ref\r\n      .datum(data)\r\n      .transition()\r\n      .duration(TRANSITION_DURATION)\r\n      .ease(d3.easeQuadIn)\r\n      .attr(\r\n        \"d\",\r\n        d3\r\n          .line()\r\n          .x((d) => {\r\n            return this.xScale(d.timestamp);\r\n          })\r\n          .y((d) => {\r\n            return this.yScale(d.pred);\r\n          })\r\n      );\r\n  }\r\n\r\n  updateAreaSeries(series, data) {\r\n    series.ref\r\n      .datum(data)\r\n      .transition()\r\n      .duration(TRANSITION_DURATION)\r\n      .ease(d3.easeQuadIn)\r\n      .attr(\r\n        \"d\",\r\n        d3\r\n          .area()\r\n          .x((d) => {\r\n            return this.xScale(d.timestamp);\r\n          })\r\n          .y0(this.yScale(0))\r\n          .y1((d) => {\r\n            return this.yScale(d.value);\r\n          })\r\n      );\r\n  }\r\n\r\n  toggleSeries = (id) => {\r\n    if (id) {\r\n      const series = this.seriesDict[id];\r\n      const hidden = series.ref.classed(\"hidden\");\r\n      series.ref.classed(\"hidden\", !hidden);\r\n    }\r\n  };\r\n\r\n  // Helper functions\r\n  adjustAxes(data, pred_bool) {\r\n    var minValue, maxValue;\r\n    if (pred_bool) {\r\n      let minActual = d3.min(data, (d) => d.value);\r\n      let minPred = d3.min(data, (d) => d.pred);\r\n      minValue = Math.floor(Math.min(minActual, minPred) * 10) / 10;\r\n\r\n      let maxActual = d3.max(data, (d) => d.value);\r\n      let maxPred = d3.max(data, (d) => d.pred);\r\n      maxValue = Math.ceil(Math.max(maxActual, maxPred) * 10) / 10;\r\n    } else {\r\n      maxValue = d3.max(data, (d) => d.value);\r\n      minValue = d3.min(data, (d) => d.value);\r\n    }\r\n    this.xScale.domain(d3.extent(data, (d) => d.timestamp));\r\n    this.xAxisRef\r\n      .transition()\r\n      .duration(TRANSITION_DURATION)\r\n      .ease(d3.easeLinear)\r\n      .call(d3.axisBottom(this.xScale));\r\n\r\n    this.yScale.domain([minValue, maxValue]);\r\n    this.yAxisRef\r\n      .transition()\r\n      .duration(TRANSITION_DURATION)\r\n      .ease(d3.easeLinear)\r\n      .call(\r\n        d3\r\n          .axisLeft(this.yScale)\r\n          .ticks(maxValue < MAX_Y_TICKS ? maxValue : MAX_Y_TICKS)\r\n          .tickFormat(d3.format(\".1f\"))\r\n      );\r\n  }\r\n\r\n  adjustDimensions() {\r\n    /*\r\n  This function adapts axes and lines to width/height inherited from parent\r\n  container element. If responsiveHeight and responsiveWidth are true, the\r\n  parent container is filled.\r\n  */\r\n    if (this.responsiveHeight) {\r\n      this.outerHeight = this.elRef.offsetHeight;\r\n      this.svg\r\n        .transition()\r\n        .duration(TRANSITION_DURATION)\r\n        .ease(d3.easeLinear)\r\n        .attr(\"height\", this.outerHeight);\r\n      this.group\r\n        .transition()\r\n        .duration(TRANSITION_DURATION)\r\n        .ease(d3.easeLinear)\r\n        .attr(\r\n          \"height\",\r\n          this.outerHeight - this.margin.top - this.margin.bottom\r\n        );\r\n      this.yScale.range([this.outerHeight - this.margin.bottom, 0]);\r\n    }\r\n\r\n    if (this.responsiveWidth) {\r\n      this.outerWidth = this.elRef.offsetWidth;\r\n      this.svg\r\n        .transition()\r\n        .duration(TRANSITION_DURATION)\r\n        .ease(d3.easeLinear)\r\n        .attr(\"width\", this.outerWidth);\r\n      this.group\r\n        .transition()\r\n        .duration(TRANSITION_DURATION)\r\n        .ease(d3.easeLinear)\r\n        .attr(\r\n          \"width\",\r\n          this.outerWidth - this.margin.left - this.margin.right\r\n        );\r\n      this.xScale.range([\r\n        0,\r\n        this.outerWidth - this.margin.left - this.margin.right,\r\n      ]);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChartVisuals;\r\n","import React, { createRef } from \"react\";\r\nimport D3TsChart from \"./ChartVisuals\";\r\n\r\nconst MAX_POINTS_TO_STORE = 50; // Stored in client memory\r\nconst DEFAULT_X_TICKS = 30; // Granularity along x-axis\r\n\r\nexport class Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Series for sensor data, prediction and anomalies:\r\n    this.seriesList = [\r\n      {\r\n        name: \"sensor-data\",\r\n        type: \"LINE\",\r\n        stroke: \"#038C7E\",\r\n        strokeWidth: 5,\r\n        label: \"Reading\",\r\n        labelClass: \"readings\",\r\n      },\r\n    ];\r\n    if (this.props.pred) {\r\n      // if current signal has prediction properties\r\n      this.seriesList.push(\r\n        {\r\n          name: \"prediction\",\r\n          type: \"LINE\",\r\n          stroke: \"#E67002\",\r\n          strokeWidth: 3,\r\n          label: \"Prediction\",\r\n          labelClass: \"prediction\",\r\n        },\r\n        {\r\n          name: \"anomaly\",\r\n          type: \"AREA\",\r\n          fill: \"rgba(216, 13, 49, 0.35)\",\r\n          stroke: \"transparent\",\r\n          strokeWidth: 0,\r\n          label: \"Anomaly\",\r\n          labelClass: \"anomaly\",\r\n        }\r\n      );\r\n    }\r\n    // Set threshold values for samples (predetermined based on experience):\r\n    var threshold = 0;\r\n    var ofx = 0;\r\n    if (this.props.samples) {\r\n      if (this.props.sensorId === \"me1_exhausttemp1\") {\r\n        ofx = 1.5;\r\n        threshold = 5;\r\n      }\r\n      if (this.props.sensorId === \"me1_exhausttemp2\") {\r\n        ofx = 10;\r\n        threshold = 5;\r\n      }\r\n    }\r\n    // Instantiate a new D3TsChart:\r\n    this.tsChart = new D3TsChart();\r\n    this.wrapper = createRef(); // handle references to component node\r\n    this.updateThreshold = this.updateThreshold.bind(this);\r\n\r\n    this.state = {\r\n      data: [], // storing values from the last MAX_POINTS_TO_STORE timesteps\r\n      lastDatetime: null, // last registered datetime\r\n      lastTimeStr: \"\", // last registered time\r\n      lastDateStr: \"\", // last registered date\r\n      connected: false, // status of signal\r\n      error: \"\", // error message\r\n      threshold: threshold, // threshold value as defined above\r\n      ofx: ofx, // offset x-value as defined above\r\n      predToggled: true, // boolean toggle status for prediction values\r\n      anomToggled: true, // boolean toggle status for registered anomalies\r\n    };\r\n  }\r\n\r\n  // If component is succesfully mounted\r\n  componentDidMount() {\r\n    const node = this.wrapper.current; // used for node ref\r\n\r\n    // Initialize chart preliminaries:\r\n    this.tsChart.init({\r\n      elRef: node.getElementsByClassName(\"chart-container\")[0],\r\n      classList: {\r\n        svg: \"anomaly_chart\",\r\n      },\r\n    });\r\n\r\n    // Add series from seriesList:\r\n    this.tsChart.addSeries(this.seriesList[0]); // readings\r\n    if (this.props.pred) {\r\n      this.tsChart.addSeries(this.seriesList[1]); // anomaly\r\n      this.tsChart.addSeries(this.seriesList[2]); // prediction\r\n    }\r\n\r\n    this.attachFocusWatcher(); // call handler for window focus\r\n  }\r\n\r\n  // On change in props, affecting state over time:\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    // If next registered time is null (no valid reading provided):\r\n    if (nextProps.values.time === null) {\r\n      console.log(\"yes\");\r\n      return { lastTimeStr: \"\", lastDateStr: \"\", connected: false };\r\n    }\r\n    let connected;\r\n    let error;\r\n    let datetime;\r\n    nextProps.connected ? (connected = true) : (connected = false);\r\n    connected ? (error = \"\") : (error = \"Error: No new values found\");\r\n    const values = nextProps.values;\r\n    connected\r\n      ? (datetime = new Date(values.time))\r\n      : (datetime = prevState.lastDatetime);\r\n    const threshold = prevState.threshold;\r\n    const timestamp = Date.parse(datetime);\r\n    const dateStr = datetime.toLocaleDateString(\"en-GB\");\r\n    const timeStr = datetime.toLocaleTimeString(\"en-GB\");\r\n    const data = prevState.data;\r\n    // Calculate storage slicer:\r\n    const pointsToStore = Math.max(data.length - MAX_POINTS_TO_STORE, 0);\r\n    var lastTimestamp = \"\";\r\n\r\n    // Get last valid timestamp:\r\n    if (prevState.data.length > 0) {\r\n      lastTimestamp = prevState.data[prevState.data.length - 1].timestamp;\r\n    }\r\n\r\n    // Verify that the current timestamp differs from the last timestamp\r\n    // to prevent excessive rerendering and faults in the chart:\r\n    if (timestamp !== lastTimestamp) {\r\n      // Initial definition of newValues:\r\n      const newValues = {\r\n        timestamp: timestamp,\r\n        value: values.signal,\r\n      };\r\n      if (nextProps.pred) {\r\n        // Adjust newValues if the current chart has a prediction state:\r\n        newValues[\"pred\"] = values.pred + prevState.ofx;\r\n        newValues[\"deviation\"] = Math.abs(newValues.value - newValues.pred);\r\n        newValues[\"anomaly\"] =\r\n          threshold === 0 ? 0 : newValues[\"deviation\"] > threshold ? 1 : 0;\r\n      }\r\n\r\n      data.push(newValues); // add newValues to existing data storage\r\n      return {\r\n        data: data.slice(pointsToStore), // slice data storage\r\n        connected: connected,\r\n        error: error,\r\n        lastDatetime: datetime,\r\n        lastDateStr: dateStr,\r\n        lastTimeStr: timeStr,\r\n      };\r\n    } else {\r\n      return {\r\n        data: data.slice(pointsToStore),\r\n        connected: connected,\r\n        error: error,\r\n        lastDatetime: datetime,\r\n        lastDateStr: dateStr,\r\n        lastTimeStr: timeStr,\r\n      };\r\n    }\r\n  }\r\n\r\n  // On component update:\r\n  componentDidUpdate(_prev_props, _prevState) {\r\n    this.updateChart(); // call chart update function\r\n  }\r\n\r\n  // Handle window focus\r\n  attachFocusWatcher() {\r\n    window.focused = true;\r\n    window.onblur = () => {\r\n      window.focused = false;\r\n    };\r\n    window.onfocus = () => {\r\n      window.focused = true;\r\n    };\r\n  }\r\n\r\n  updateChart() {\r\n    /*\r\n    Update necessary parts of the chart, including axes, y-axis value domain,\r\n    and applying data from the latest timestep.\r\n  */\r\n    // Calculate number of values registered along x-axis (if more than\r\n    // DEFAULT_X_TICKS values have been registered, the number of ticks maxes\r\n    // out at DEFAULT_X_TICKS):\r\n    const xTicks = Math.max(\r\n      this.state.data.length - (this.props[\"x-ticks\"] || DEFAULT_X_TICKS),\r\n      0\r\n    );\r\n    const data = this.state.data.slice(xTicks); // get relevant values\r\n    // Calculate highest value currently seen:\r\n    var highestValueInView = Math.max(...data.map((p) => p.value));\r\n    if (this.props.pred) {\r\n      // If prediction values are included, calculate highest pred value:\r\n      let highestPredInView = Math.max(...data.map((p) => p.pred));\r\n      highestValueInView = Math.max(highestValueInView, highestPredInView);\r\n    }\r\n\r\n    // Apply anomaly line based on the currently registered maximum in-view\r\n    // value (makes the anomalies take up the entirety of the y-domain):\r\n    const anomalyLine = data.map((p) => ({\r\n      timestamp: p.timestamp,\r\n      value: p.anomaly ? highestValueInView : 0,\r\n    }));\r\n\r\n    this.tsChart.adjustAxes(data, this.props.pred);\r\n    this.tsChart.setSeriesData(\"sensor-data\", data, false);\r\n    if (this.props.pred) {\r\n      this.tsChart.setSeriesData(\"anomaly\", anomalyLine, false);\r\n      this.tsChart.setSeriesData(\"prediction\", data, false);\r\n    }\r\n  }\r\n\r\n  toggleSeries = ({ target }) => {\r\n    /*\r\n    On click, toggle series based on target id.\r\n  */\r\n    if (target.id === \"anomaly\") {\r\n      this.setState({ anomToggled: !this.state.anomToggled });\r\n    } else if (target.id === \"prediction\") {\r\n      this.setState({ predToggled: !this.state.predToggled });\r\n    }\r\n    target.classList.toggle(\"hidden\");\r\n    this.tsChart.toggleSeries(target.id);\r\n  };\r\n\r\n  updateThreshold = (event) => {\r\n    /*\r\n    On click, update threshold value.\r\n  */\r\n    event.preventDefault();\r\n    const thresholdValue = this.thresholdField.value;\r\n    if (thresholdValue !== \"\") {\r\n      // prevent empty, non-numeric values\r\n      this.setState({ threshold: thresholdValue });\r\n    }\r\n  };\r\n\r\n  // Render Chart component\r\n  render = () => (\r\n    <div className=\"card\" ref={this.wrapper}>\r\n      <h2>\r\n        {!this.state.lastTimeStr\r\n          ? `${this.props.sensorId.toUpperCase()} connecting...`\r\n          : !this.state.connected\r\n          ? `${this.props.sensorId.toUpperCase()}`\r\n          : `${this.props.sensorId.toUpperCase()}: ${\r\n              this.props.values.signal\r\n            }`}\r\n      </h2>\r\n\r\n      <span\r\n        className={\"status \" + (this.state.connected ? \"success\" : \"danger\")}\r\n      >\r\n        {this.state.error}\r\n        <i className=\"pulse\"></i>\r\n        {this.state.connected ? \"Connected\" : \"Disconnected\"}\r\n      </span>\r\n\r\n      <div\r\n        className={\"chart-container \" + (this.state.error ? \"faded\" : \"\")}\r\n      ></div>\r\n\r\n      <div className=\"legend\">\r\n        {this.seriesList.map((series) => {\r\n          return (\r\n            <span\r\n              id={series.name}\r\n              key={series.name}\r\n              className={series.labelClass}\r\n              onClick={this.toggleSeries}\r\n            >\r\n              <i className=\"box\"></i>\r\n              {series.label === \"Anomaly\" &&\r\n              this.state.anomToggled &&\r\n              this.state.connected\r\n                ? `${series.label} (T: ${this.state.threshold})`\r\n                : series.label === \"Prediction\" &&\r\n                  this.state.predToggled &&\r\n                  this.state.connected\r\n                ? `${series.label} (dev: ${\r\n                    this.state.data.length > 0\r\n                      ? this.state.data[this.state.data.length - 1][\r\n                          \"deviation\"\r\n                        ].toFixed(2)\r\n                      : 0\r\n                  })`\r\n                : series.label}\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n      <span\r\n        className={\r\n          \"timestamp \" + (this.state.connected ? \"success\" : \"danger\")\r\n        }\r\n      >\r\n        {this.state.connected\r\n          ? `${this.state.lastDateStr} ${this.state.lastTimeStr}`\r\n          : !this.state.lastTimeStr\r\n          ? \"No readings registered..\"\r\n          : `Last reading was at ${this.state.lastDateStr} ${this.state.lastTimeStr}`}\r\n      </span>\r\n\r\n      {this.props.pred\r\n        ? [\r\n            <div className=\"threshold-container\">\r\n              <hr\r\n                style={{\r\n                  border: \"1px solid rgb(230,230,230)\",\r\n                  color: \"rgb(230,230,230)\",\r\n                  backgroundColor: \"rgb(230,230,230)\",\r\n                  marginBottom: \"0px\",\r\n                }}\r\n              />\r\n              <br />\r\n\r\n              <form\r\n                className=\"threshold-form\"\r\n                onSubmit={(event) => this.updateThreshold(event)}\r\n              >\r\n                Anomaly threshold (T):\r\n                <input\r\n                  className=\"threshold-input\"\r\n                  type=\"number\"\r\n                  name=\"threshold\"\r\n                  autoComplete=\"off\"\r\n                  step=\"0.01\"\r\n                  ref={(threshold) => (this.thresholdField = threshold)}\r\n                  onClick={(event) => this.updateThreshold(event)}\r\n                />\r\n                <button\r\n                  className=\"threshold-submit\"\r\n                  onClick={(event) => this.updateThreshold(event)}\r\n                >\r\n                  Update\r\n                </button>\r\n              </form>\r\n            </div>,\r\n          ]\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport MultiSelect from \"@khanacademy/react-multi-select\";\r\nimport Chart from \"./Chart\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport class ChartDashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: [], // signals\r\n      options: [], // multi-select options\r\n      chartItems: {}, // rendered charts\r\n      connected: false, // connection status of Socket IO\r\n      allSignals: [], // all signals available for visualization\r\n      thread_created: false, // boolean if thread has been created\r\n      error: false, // handle threading error\r\n    };\r\n    // Property definitions from parent:\r\n    this.system = this.props.system;\r\n    this.inputs = this.props.inputs;\r\n    this.outputs = this.props.outputs;\r\n    this.timesteps = this.props.modelTimesteps;\r\n    this.sampleFiles = this.props.sampleFiles;\r\n  }\r\n\r\n  // If component is succesfully mounted\r\n  componentDidMount() {\r\n    fetch(`keras_model/${this.sampleFiles}`); // fetch model from server API\r\n    fetch(`scaler/${this.sampleFiles}`); // fetch scaler from server API\r\n    // Convert inputs and outputs to strings for easier parsing to API server:\r\n    const strInputs = this.inputs.join(\",\");\r\n    const strOutputs = this.outputs.join(\",\");\r\n    this.onReload(); // handle window reload\r\n\r\n    // Start threading object in API, and generate the first input values to\r\n    // the prediction model:\r\n    fetch(`create_thread/${this.system}/${strInputs}/${strOutputs}`).then(\r\n      (response) =>\r\n        response.json().then((data) => {\r\n          if (data.thread_created) {\r\n            this.setSignalSelection();\r\n            this.setState({\r\n              thread_created: data.thread_created,\r\n            });\r\n          } else {\r\n            this.setState({\r\n              thread_created: data.thread_created,\r\n              error: true,\r\n            });\r\n          }\r\n        })\r\n    );\r\n  }\r\n\r\n  connect = () => {\r\n    /*\r\n      Establish conenction between server and client through Socket IO\r\n      websocket.\r\n    */\r\n    this.socket = io.connect(`/?system=${this.system}`);\r\n  };\r\n\r\n  onReload = () => {\r\n    /*\r\n      Restart necessary parts of the API threading and socket connections upon\r\n      reloading the browser window.\r\n    */\r\n    if (window.performance) {\r\n      if (performance.navigation.type === 1) {\r\n        fetch(\"reload\"); // stop thread activity through API call\r\n      }\r\n    }\r\n  };\r\n\r\n  setSignalSelection = () => {\r\n    /*\r\n      Get signals based on inputs and outputs in the model parameters.\r\n    */\r\n    const options = this.state.options;\r\n    const outputs = this.outputs;\r\n    // Non-repeating union of signals:\r\n    const allSignals = [...new Set([...this.inputs, ...this.outputs])];\r\n    for (let signal of allSignals) {\r\n      options.push({\r\n        label: outputs.includes(signal) // if signal will be predicted\r\n          ? `${signal} (with prediction)` // label with prediction\r\n          : signal, // label without prediction\r\n        value: signal, // value used as access key\r\n      });\r\n    }\r\n    this.setState({\r\n      options: options, // update options for multi-select dropdown menu\r\n      allSignals: allSignals, // set all signals\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    /*\r\n      Handle changes to component states before rerender.\r\n    */\r\n    // Booleans to determine if state and Socket IO status will be updated:\r\n    let updateState = false;\r\n    let updateConnectionStatus = false;\r\n    // Current parameters:\r\n    const selected = this.state.selected; // selected\r\n    const connected = this.state.connected; // connection status\r\n    let chartItems = this.state.chartItems; // Chart component items\r\n    // Determine newly added and/or deleted signals:\r\n    const added = selected.filter((sig) => !prevState.selected.includes(sig));\r\n    const deleted = prevState.selected.filter(\r\n      (sig) => !selected.includes(sig)\r\n    );\r\n\r\n    // If a signal has been newly selected:\r\n    if (added.length > 0) {\r\n      // If Socket IO is not connected:\r\n      if (!connected) {\r\n        updateConnectionStatus = true;\r\n      }\r\n      updateState = true; // state needs to be updated to reflect changes\r\n\r\n      // Add newly selected charts:\r\n      chartItems = this.addNewCharts(added, chartItems, connected);\r\n    }\r\n\r\n    // If a signal has been newly deselected:\r\n    if (deleted.length > 0) {\r\n      updateState = true; // state needs to be updated to reflect changes\r\n      // Delete newly deselected charts:\r\n      chartItems = this.deleteDeselectedCharts(deleted, chartItems);\r\n    }\r\n\r\n    if (updateState) {\r\n      this.setUpdatedState(chartItems, updateConnectionStatus);\r\n    }\r\n  }\r\n\r\n  addChart = (sensor, key, pred, samples, connected, values) => {\r\n    /*\r\n      Returns a Chart component based on defined properties:\r\n        - sensor: name of the current sensor\r\n        - key: unique identifier\r\n        - pred: boolean, true if the signal is part of predicted outputs\r\n        - samples: boolean, true if sample files are used\r\n        - connected: boolean, true if signal is connected and receiving values\r\n        - values: latest id, timestep, reading, and pred (if applicable)\r\n    */\r\n    return (\r\n      <Chart\r\n        sensorId={sensor}\r\n        key={key}\r\n        pred={pred}\r\n        samples={samples}\r\n        connected={connected}\r\n        values={values}\r\n      />\r\n    );\r\n  };\r\n\r\n  addNewCharts = (newlySelected, selectedItems, connected) => {\r\n    /*\r\n      Append newly selected charts to selectedItems with correct parameters\r\n      necessary for the AddChart() function.\r\n    */\r\n    for (let sig of newlySelected) {\r\n      // If current signal is an output column in the prediction model:\r\n      const isSignalToPredict = this.outputs.includes(sig); // boolean\r\n      // Set initial values as undefined:\r\n      const values = {\r\n        id: null,\r\n        time: null,\r\n        signal: null,\r\n        pred: null,\r\n      };\r\n      // Add current signal from newly selected as a new chart:\r\n      selectedItems[sig] = this.addChart(\r\n        sig,\r\n        sig,\r\n        isSignalToPredict,\r\n        this.sampleFiles,\r\n        connected,\r\n        values\r\n      );\r\n    }\r\n    return selectedItems;\r\n  };\r\n\r\n  deleteDeselectedCharts = (newlyDeselected, selectedItems) => {\r\n    /*\r\n      Deleted newly deselected chart from selectedItems object\r\n    */\r\n    for (let sig of newlyDeselected) {\r\n      delete selectedItems[sig];\r\n    }\r\n    return selectedItems;\r\n  };\r\n\r\n  getValues = () => {\r\n    /*\r\n      Socket IO call to API server, which fetches data each time the server\r\n      emits new values. When new values are received, the values are sent\r\n      to the checkReading() function immediately. The values include columns\r\n      for id, time, and all relevant signals. If the signals are part of the\r\n      predicted outputs, the predicted values of these signals are also\r\n      included with a key suffix of \"_pred\".\r\n    */\r\n    if (this.state.selected.length > 0) {\r\n      this.socket.on(\"values\", (values) => this.checkReading(values));\r\n    }\r\n  };\r\n\r\n  checkReading = (values) => {\r\n    /*\r\n      Determines whether or not the values last received are valid or false.\r\n      If the values are valid, the storeReading() function is called.\r\n    */\r\n    var connected = this.state.connected;\r\n    if (values === false) {\r\n      // If disconnected, update the Socket IO status:\r\n      this.socket.disconnect();\r\n      this.setState({\r\n        connected: false,\r\n      });\r\n      connected = false;\r\n    }\r\n    // If connected, update and store reading in Chart items:\r\n    this.storeReading(values, connected);\r\n  };\r\n\r\n  storeReading = (values, connected) => {\r\n    /*\r\n      Update Charts based on last received values from API server.\r\n    */\r\n    var chartItems = {};\r\n    const selected = this.state.selected;\r\n    const time = values.time;\r\n    const id = values.id;\r\n    for (let sig of selected) {\r\n      // If current signal is an output column in the prediction model:\r\n      const isSignalToPredict = this.outputs.includes(sig); // boolean\r\n\r\n      // Add current signal as a new Chart with updated values:\r\n      chartItems[sig] = this.addChart(\r\n        sig,\r\n        sig,\r\n        isSignalToPredict,\r\n        this.sampleFiles,\r\n        connected,\r\n        {\r\n          id: id,\r\n          time: time,\r\n          signal: values[sig],\r\n          // Add prediction signal if isSignalToPredict is true:\r\n          pred: isSignalToPredict ? values[`${sig}_pred`] : null,\r\n        }\r\n      );\r\n    }\r\n    // Update chartItems state with new values:\r\n    this.setState({ chartItems: chartItems });\r\n  };\r\n\r\n  setUpdatedState = (selectedItems, updateConnectionStatus) => {\r\n    /*\r\n      If a new signal has been newly selected or deselected, update the\r\n      chart items to reflect these changes. If the connection status needs to\r\n      be changed, connected is set to true, and the threading used in the\r\n      API client (enabling parallel multi-processing) will be started.\r\n      Consecutively, the client should start listening for new values through\r\n      the Socket IO connection. This is established through the getValues()\r\n      function.\r\n    */\r\n    if (updateConnectionStatus) {\r\n      this.connect();\r\n      this.setState({\r\n        chartItems: selectedItems,\r\n        connected: true,\r\n      });\r\n      fetch(\"start_thread\"); // start threading for parallelism\r\n      this.getValues(); // fetch newly emitted values from server\r\n    } else {\r\n      this.setState({\r\n        chartItems: selectedItems,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    /*\r\n      Handle component termination\r\n    */\r\n    if (this.state.connected) {\r\n      this.socket.disconnect();\r\n    }\r\n  }\r\n\r\n  // Render component:\r\n  render() {\r\n    const selected = this.state.selected;\r\n    const options = this.state.options;\r\n    const chartItems = this.state.chartItems;\r\n    const error = this.state.error;\r\n    const noSignals = Object.keys(this.state.allSignals).length === 0;\r\n    const thread_created = this.state.thread_created;\r\n    return (\r\n      <div className=\"selector-chart-container\">\r\n        <div className=\"selector-container\">\r\n          <MultiSelect\r\n            id=\"selector\"\r\n            options={options}\r\n            selected={selected}\r\n            onSelectedChanged={(selected) => this.setState({ selected })}\r\n            overrideStrings={{\r\n              selectSomeItems:\r\n                error && !thread_created\r\n                  ? \"Failed to create threading. Please reload the page\"\r\n                  : !thread_created\r\n                  ? \"Initializing, please wait..\"\r\n                  : noSignals\r\n                  ? \"No signals found..\"\r\n                  : \"Select signals\",\r\n              allItemsAreSelected: \"Showing all signals\",\r\n              selectAll: \"Select all\",\r\n            }}\r\n            disableSearch={true}\r\n            isLoading={noSignals || !thread_created ? true : false}\r\n          />\r\n        </div>\r\n        <div className=\"charts-container\">{Object.values(chartItems)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartDashboard;\r\n","import React from \"react\";\r\n\r\nexport const Header = (props) => {\r\n  const onHomeClick = () => {\r\n    window.location.reload(true);\r\n  };\r\n  return (\r\n    <div className=\"header-container\">\r\n      <div className=\"homebtn-container\">\r\n        <button className=\"homebtn\" onClick={onHomeClick}>\r\n          <i className=\"fa fa-home\" />\r\n        </button>\r\n      </div>\r\n      <h1>\r\n        {props.about\r\n          ? \"ABOUT\"\r\n          : `ANOMALY DETECTION ${\r\n              props.dashboard ? \"DASHBOARD\" : \"STARTPAGE\"\r\n            }`}\r\n      </h1>\r\n      {props.about\r\n        ? [\r\n            <div id=\"link-container\">\r\n              <h4 className=\"repotitle\">GITHUB REPOSITORIES</h4>\r\n              <span>\r\n                <a\r\n                  href=\"https://www.google.com\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  [ Web Application ]\r\n                </a>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <a\r\n                  href=\"https://www.google.com\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  [ Modeling API ]\r\n                </a>\r\n              </span>\r\n            </div>,\r\n          ]\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport MultiSelect from \"@khanacademy/react-multi-select\";\r\n\r\n// Model specification class for system selection\r\nexport class ModelSpecifications extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.useSampleFiles) {\r\n      // Set selected to Nogva Engines if sample files are used:\r\n      this.state = {\r\n        options: [],\r\n        selected: [\"Nogva Engines\"],\r\n        selectedInputs: [],\r\n        selectedOutputs: [],\r\n      };\r\n      // Send selected to Startpage parent:\r\n      this.props.sendSystemUpdate(this.state.selected);\r\n    } else {\r\n      this.state = {\r\n        options: [],\r\n        selected: [],\r\n        selectedInputs: [],\r\n        selectedOutputs: [],\r\n      };\r\n    }\r\n    this.maxSelect = 1; // maximum number of systems that can be selected\r\n    this.onSelectedInput = this.onSelectedInput.bind(this);\r\n    this.onSelectedOutput = this.onSelectedOutput.bind(this);\r\n  }\r\n\r\n  // If component is succesfully mounted\r\n  componentDidMount() {\r\n    // Get all systems from database by calling 'systems' route in API:\r\n    fetch(\"systems\").then((response) =>\r\n      response.json().then((data) => {\r\n        let options = [];\r\n        let optionsEnabled = [];\r\n        let optionsDisabled = [];\r\n        for (let [system, hasData] of Object.entries(data.systems)) {\r\n          if (hasData) {\r\n            // If system has data, add to enabled list:\r\n            optionsEnabled.push({\r\n              label: hasData ? system : `${system} (has no data)`,\r\n              value: system,\r\n              disabled: false,\r\n            });\r\n          } else {\r\n            // If system does not have data, add to disabled list:\r\n            optionsDisabled.push({\r\n              label: `${system} (has no data)`,\r\n              value: system,\r\n              disabled: true,\r\n            });\r\n          }\r\n          // Options with enabled systems first, then disabled systems:\r\n          options = optionsEnabled.concat(optionsDisabled);\r\n        }\r\n        this.setState({ options: options });\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelect = (selected) => {\r\n    /*\r\n    Handle selection of systems based on maximum number of selected systems\r\n    allowed. If selections exceed the maximum number, the user is shown a\r\n    toast alert preventing the breached selection.\r\n  */\r\n    const maxSelect = this.maxSelect;\r\n    if (selected.length > maxSelect) {\r\n      alert(`You can only select ${maxSelect} system.`);\r\n    } else {\r\n      this.setState({ selected });\r\n      this.props.sendSystemUpdate(selected);\r\n    }\r\n  };\r\n\r\n  onSelectedInput = (selectedInputs) => {\r\n    /*\r\n    If inputs are given from child component SignalSpecifications, set\r\n    selected inputs and send the inputs to the Startpage parent component.\r\n  */\r\n    this.setState({ selectedInputs: selectedInputs });\r\n    this.props.sendInputsUpdate(selectedInputs);\r\n  };\r\n  onSelectedOutput = (selectedOutputs) => {\r\n    /*\r\n    If ouputs are given from child component SignalSpecifications, set\r\n    selected inputs and send the inputs to the Startpage parent component.\r\n  */\r\n    this.setState({ selectedOutputs: selectedOutputs });\r\n    this.props.sendOutputsUpdate(selectedOutputs);\r\n  };\r\n\r\n  onContinue = () => {\r\n    /*\r\n    If continue button is pressed (after all selections are made), send\r\n    model parameters to the Startpage parent component.\r\n  */\r\n    const modelSelections = {\r\n      selectedSystem: this.state.selected,\r\n      selectedInputs: this.state.selectedInputs,\r\n      selectedOutputs: this.state.selectedOutputs,\r\n    };\r\n    this.props.sendModelSelections(modelSelections);\r\n  };\r\n\r\n  render() {\r\n    const options = this.state.options;\r\n    const selected = this.state.selected;\r\n    const maxSelect = this.maxSelect;\r\n    const reachedSystemMax = selected.length === maxSelect;\r\n    const reachedInputMax =\r\n      this.state.selectedInputs.length === this.props.inputSignals;\r\n    const reachedOutputMax =\r\n      this.state.selectedOutputs.length === this.props.outputSignals;\r\n    const hasLoaded = options.length > 0;\r\n    const allowContinue = reachedOutputMax && reachedInputMax && hasLoaded;\r\n    const useSampleFiles = this.props.useSampleFiles;\r\n    const inputSignals = this.props.inputSignals;\r\n    const outputSignals = this.props.outputSignals;\r\n    return (\r\n      <div className=\"system-selector-container\">\r\n        <div className=\"mod-selector-container\">\r\n          <div className=\"mod-spec-text\">\r\n            {useSampleFiles\r\n              ? \"System on R/V Gunnerus used in sample model:\"\r\n              : \"Select system on R/V Gunnerus from database:\"}\r\n          </div>\r\n          <MultiSelect\r\n            className=\"model_selector\"\r\n            options={options}\r\n            selected={hasLoaded ? selected : []}\r\n            onSelectedChanged={(selected) => this.onSelect(selected)}\r\n            overrideStrings={{\r\n              selectSomeItems: hasLoaded\r\n                ? \"Select system\"\r\n                : \"Loading systems from database, please wait..\",\r\n              allItemsAreSelected: `${\r\n                maxSelect > 1 ? \"All systems selected\" : selected\r\n              }`,\r\n            }}\r\n            hasSelectAll={maxSelect > 1 ? true : false}\r\n            disableSearch={false}\r\n            isLoading={hasLoaded ? false : true}\r\n          />\r\n        </div>\r\n        <div className=\"io-selector-container\">\r\n          {reachedSystemMax ? (\r\n            <SignalSpecifications\r\n              system={selected}\r\n              type=\"input\"\r\n              maxSelect={inputSignals}\r\n              sendUpdate={(selected) => this.onSelectedInput(selected)}\r\n              useSampleFiles={useSampleFiles}\r\n            />\r\n          ) : null}\r\n          {reachedSystemMax ? (\r\n            <SignalSpecifications\r\n              system={selected}\r\n              type=\"output\"\r\n              maxSelect={outputSignals}\r\n              sendUpdate={(selected) => this.onSelectedOutput(selected)}\r\n              useSampleFiles={useSampleFiles}\r\n            />\r\n          ) : null}\r\n          <div className=\"continue-with-IO\">\r\n            {reachedSystemMax ? (\r\n              <button\r\n                id=\"continue-with-IO\"\r\n                ref={(contBtn) => {\r\n                  this.contBtn = contBtn;\r\n                }}\r\n                disabled={!allowContinue}\r\n                onClick={() => this.onContinue()}\r\n                type=\"submit\"\r\n              >\r\n                <span id=\"cont-btn\">Continue</span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModelSpecifications;\r\n\r\n// Specification class for input and output signals selection\r\nclass SignalSpecifications extends React.Component {\r\n  /*\r\n    The component functions identically for both input and output selection.\r\n    Choice of providing input or output is done through the type property,\r\n    which will make the component behave as intended for the chosen type.\r\n  */\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.useSampleFiles) {\r\n      // Set selected to sample inputs if sample files are used:\r\n      if (props.type === \"input\") {\r\n        this.state = {\r\n          options: [],\r\n          selected: [\r\n            \"me1_backupbatt\",\r\n            \"me1_boostpress\",\r\n            \"me1_enginespeed\",\r\n            \"me1_exhausttemp1\",\r\n            \"me1_exhausttemp2\",\r\n            \"me1_fuelrate\",\r\n            \"me1_hours\",\r\n            \"me1_lopress\",\r\n            \"me1_luboiltemp\",\r\n            \"me1_power\",\r\n            \"me1_startbatt\",\r\n            \"me1_coolanttemp\",\r\n          ],\r\n        };\r\n      }\r\n      // Set selected to sample outputs if sample files are used:\r\n      if (props.type === \"output\") {\r\n        this.state = {\r\n          options: [],\r\n          selected: [\"me1_exhausttemp1\", \"me1_exhausttemp2\"],\r\n        };\r\n      }\r\n    } else {\r\n      this.state = {\r\n        options: [],\r\n        selected: [],\r\n      };\r\n    }\r\n\r\n    this.SIGNAL_MAX = 20; // set to prevent exceeding server capabilities\r\n  }\r\n  // If component is succesfully mounted\r\n  componentDidMount() {\r\n    // Get signals from database through API call based on selected system:\r\n    fetch(`signals/${this.props.system}`).then((response) =>\r\n      response.json().then((data) => {\r\n        const options = [];\r\n        for (let sig of data.signals) {\r\n          if (sig !== \"id\" && sig !== \"time\") {\r\n            // Add options if column is not id or time:\r\n            options.push({\r\n              label: sig,\r\n              value: sig,\r\n            });\r\n          }\r\n        }\r\n        this.setState({\r\n          options: options,\r\n        });\r\n        if (this.props.useSampleFiles) {\r\n          // If use sample files, send selection update to Startpage parent:\r\n          this.props.sendUpdate(this.state.selected);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelect = (selected) => {\r\n    /*\r\n    On selecting new input/output signals, the function verifies that number\r\n    of selection does not exceed maximum selection provided by the .h5 model\r\n    file or MAX_SIGNAL variable. If selections exceed the set requirements,\r\n    the user is shown a toast alert preventing the breached selection.\r\n  */\r\n    const maxSelect = this.props.maxSelect;\r\n    const type = this.props.type;\r\n    const signalMax = Math.max(this.SIGNAL_MAX, maxSelect);\r\n    if (this.props.useSampleFiles) {\r\n      alert(`The ${type} signals area already set for the sample model.`);\r\n    } else {\r\n      if (selected.length > maxSelect) {\r\n        alert(\r\n          `Maximum specified ${type} signals in your model is ${maxSelect}!`\r\n        );\r\n      } else if (selected.length > signalMax) {\r\n        alert(\r\n          `The maximum number of signals is set to ${signalMax} to ` +\r\n            `preserve server capabilities.`\r\n        );\r\n      } else {\r\n        this.setState({ selected });\r\n        this.props.sendUpdate(selected);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const options = this.state.options;\r\n    const selected = this.state.selected;\r\n    const type = this.props.type;\r\n    const maxSelect = this.props.maxSelect;\r\n    const typeStr = type === \"input\" ? type : \"predicted output\";\r\n    const typeStrTitle = typeStr.charAt(0).toUpperCase() + typeStr.slice(1);\r\n    const hasLoaded = options.length > 0;\r\n    const system = this.props.system;\r\n    const useSampleFiles = this.props.useSampleFiles;\r\n    return (\r\n      <div className=\"mod-selector-container\">\r\n        <div className=\"mod-spec-text\">\r\n          {useSampleFiles\r\n            ? `${typeStrTitle} signals used in sample model ` +\r\n              `(${selected.length} in total):`\r\n            : `Select the ${typeStr} signals used by your ML model (` +\r\n              `${selected.length} of ${maxSelect} selected):`}\r\n        </div>\r\n        <MultiSelect\r\n          className=\"model_selector\"\r\n          id={type}\r\n          options={options}\r\n          selected={hasLoaded ? selected : []}\r\n          onSelectedChanged={(selected) => this.onSelect(selected)}\r\n          overrideStrings={{\r\n            selectSomeItems: hasLoaded\r\n              ? `Select ${typeStr} signals used by your ML model`\r\n              : `Loading ${type} signals from ${system}, please wait..`,\r\n            allItemsAreSelected: `${\r\n              maxSelect > 1 ? `All ${type} signals selected` : selected\r\n            }`,\r\n          }}\r\n          hasSelectAll={maxSelect > 1 && !useSampleFiles ? true : false}\r\n          disableSearch={false}\r\n          isLoading={hasLoaded ? false : true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useMemo, useCallback, useState, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst baseStyle = {\r\n  position: \"relative\",\r\n  display: \"inline-block\",\r\n  width: \"275px\",\r\n  textAlign: \"center\",\r\n  verticalAlign: \"middle\",\r\n  padding: \"10px 30px 10px 30px\",\r\n  margin: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 4,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst MAX_FILENAME_LENGTH = 19; // affects display, not upload restrictions\r\nconst activeStyle = {\r\n  borderColor: \"#00b3a1\",\r\n};\r\n\r\nconst re = /(?:\\.([^.]+))?$/; // used to extract file formats\r\n\r\nexport const Upload = (props) => {\r\n  /*\r\n    The functional component handles uploading of model and scaler files.\r\n    Based on the id property provided by the Startpage parent, the component\r\n    is tailored towards the specific id.\r\n  */\r\n  const str_format = props.format.replace(\",\", \"/\"); // suitable for display\r\n  const MAX_SIZE = 31457280; // 30 MB\r\n  // Define hooks:\r\n  const [uploaded, setUploaded] = useState(false);\r\n  const [filename, setFilename] = useState(null);\r\n  const [fileProperties, setFileProperties] = useState({});\r\n  const [metadataReceived, setMetadataReceived] = useState(false);\r\n\r\n  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {\r\n    /*\r\n    Function based on the useDropzone component to handle file uploads, either\r\n    through drag and drop or through browsing locally stored files. A number\r\n    of error handling conditions are included to prevent the user from\r\n    uploading erroneous files. acceptedFiles and rejectedFiles are provided\r\n    by the useDropzone component, and are determined based on the file format\r\n    of the chosen file to be uploaded.\r\n  */\r\n    resetAll(); // reset parameters\r\n    if (acceptedFiles.length > 1) {\r\n      // error: more than one accepted file\r\n      alert(`You attempted to upload more than one '${str_format}' file.`);\r\n    } else if (rejectedFiles.length > 0) {\r\n      // error: more than one rejected\r\n      if (rejectedFiles.length > 1 || acceptedFiles.length > 0) {\r\n        // error: number of files\r\n        alert(`You attempted to upload more than one file.`);\r\n      } else if (rejectedFiles[0].errors[0].code === \"file-too-large\") {\r\n        // error: file size\r\n        alert(\r\n          `You have attempted to upload a file that exceeds the maximum` +\r\n            ` allowed file size of ${parseInt(\r\n              MAX_SIZE * 0.00000095367432\r\n            )} MB.`\r\n        );\r\n      } else {\r\n        // error: uploaded format not coinciding with specified format\r\n        const rejectedExtension = re.exec(rejectedFiles[0].file.name)[0];\r\n        alert(\r\n          `You attempted to upload a file with format ` +\r\n            `'${rejectedExtension}'. Make sure you upload a file with ` +\r\n            `format '${str_format}' instead.`\r\n        );\r\n      }\r\n    } else if (acceptedFiles.length === 1) {\r\n      // correct upload\r\n      // Create and store file and filename in a FormData object:\r\n      const data = new FormData();\r\n      var name = acceptedFiles[0].name;\r\n      const fileExtension = re.exec(name)[0];\r\n      data.append(\"file\", acceptedFiles[0]);\r\n      data.append(\"filename\", name);\r\n      setUploaded(true); // mark upload succesful\r\n\r\n      props.sendFilename(name, props.id); // send filename and type to parent\r\n\r\n      if (props.id === \"keras-model\") {\r\n        onModelUpload(data);\r\n      }\r\n      if (props.id === \"scaler\") {\r\n        onScalerUpload(data);\r\n      }\r\n\r\n      const nl = name.length; // name length\r\n      const fl = fileExtension.length; // length of file extension\r\n      // Handle display of filename if filename exceeds a given limit:\r\n      if (nl > MAX_FILENAME_LENGTH + fl) {\r\n        /*\r\n          Instead of displaying the full filename, the first 15 characters are\r\n          shown before '...', followed by the last 3 characters of the\r\n          filename and the file extension.\r\n        */\r\n        name =\r\n          name.substring(0, 15) +\r\n          \"...\" +\r\n          name.substring(nl - fl - 3, nl - fl) +\r\n          fileExtension;\r\n      }\r\n      setFilename(name);\r\n    }\r\n  });\r\n\r\n  const resetAll = () => {\r\n    /*\r\n    Reset parameters when onDrop is called (new file is uploaded).\r\n  */\r\n    props.resetProps(props.id);\r\n    setUploaded(false);\r\n    setFilename(null);\r\n    setFileProperties({});\r\n    setMetadataReceived(false);\r\n  };\r\n\r\n  const onModelUpload = (data) => {\r\n    /*\r\n    If uploaded file is a Keras model file, retrieve properties by sending the\r\n    model to the backend server.\r\n  */\r\n    fetch(`keras_model/${false}`, {\r\n      method: \"POST\",\r\n      body: data, // sending file from client to server\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        // If provided model is deemed valid by the server, the\r\n        // client receives model properties:\r\n        if (data.fileprops !== false) {\r\n          const modelProperties = {\r\n            inp: data.fileprops.inp,\r\n            out: data.fileprops.out,\r\n            timesteps: data.fileprops.timesteps,\r\n          };\r\n          setFileProperties(modelProperties);\r\n          // Send model properties to Startpage parent component:\r\n          props.sendModelProperties(modelProperties);\r\n        } else {\r\n          // Not succesfully received properties:\r\n          setFileProperties(false);\r\n          props.sendFilename(null, props.id);\r\n          props.sendModelProperties({\r\n            input: null,\r\n            output: null,\r\n            timesteps: null,\r\n          });\r\n        }\r\n\r\n        // Metadata received (used for both valid and invalid properties):\r\n        setMetadataReceived(true);\r\n      });\r\n    });\r\n  };\r\n\r\n  const onScalerUpload = (data) => {\r\n    /*\r\n      If uploaded file is a pickle file, it is assumed that a scaler has been\r\n      uploaded, which is sent to the server for unpickling and reading scaler\r\n      properties. The client receives these properties if the scaler is valid.\r\n    */\r\n    fetch(`scaler/${false}`, {\r\n      method: \"POST\",\r\n      body: data, // sending file from client to server\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        if (data.fileprops !== false) {\r\n          // If provided scaler is deemed valid by the server, the\r\n          // client receives scaler properties:\r\n          setFileProperties({\r\n            type: data.fileprops.type,\r\n            features: data.fileprops.features,\r\n            samples: data.fileprops.samples,\r\n          });\r\n        } else {\r\n          setFileProperties(false);\r\n          // Send model properties to Startpage parent component:\r\n          props.sendFilename(null, props.id);\r\n        }\r\n\r\n        // Metadata received (used for both valid and invalid properties):\r\n        setMetadataReceived(true);\r\n      });\r\n    });\r\n  };\r\n\r\n  // On component update (effect hook)\r\n  useEffect(() => {\r\n    /*\r\n      Handle use of sample files based on the useSampleFiles property from\r\n      Startpage parent component. Since predetermined files will not cause a\r\n      call to the onDrop() function, the effect hook is necessary to retrieve\r\n      properties through an API call and display the sample file properties to\r\n      the user.\r\n    */\r\n    if (props.useSampleFiles) {\r\n      setUploaded(true);\r\n      if (props.id === \"keras-model\") {\r\n        setFilename(\"sample_model.h5\");\r\n        fetch(`keras_model/${true}`).then((response) => {\r\n          response.json().then((data) => {\r\n            const modelProperties = {\r\n              inp: data.fileprops.inp,\r\n              out: data.fileprops.out,\r\n              timesteps: data.fileprops.timesteps,\r\n            };\r\n            setFileProperties(modelProperties);\r\n            props.sendModelProperties(modelProperties);\r\n            setMetadataReceived(true);\r\n          });\r\n        });\r\n      }\r\n      if (props.id === \"scaler\") {\r\n        setFilename(\"sample_scaler.pckl\");\r\n        fetch(`scaler/${true}`).then((response) => {\r\n          response.json().then((data) => {\r\n            setFileProperties({\r\n              type: data.fileprops.type,\r\n              features: data.fileprops.features,\r\n              samples: data.fileprops.samples,\r\n            });\r\n            setMetadataReceived(true);\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }, [props.useSampleFiles]); // only run if prop has been changed in parent\r\n\r\n  // Call to useDropzone component:\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    accept: props.format,\r\n    onDrop,\r\n    minSize: 0,\r\n    maxSize: MAX_SIZE,\r\n  });\r\n\r\n  // useMemo for handling drag activities:\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n    }),\r\n    [isDragActive]\r\n  );\r\n\r\n  const getFileSummary = (id) => {\r\n    /*\r\n    Gets a summary of the uploaded  file based on id ('keras-model' or\r\n    'scaler'). This is applied to the upload dropbox upon render.\r\n  */\r\n    if (!fileProperties) {\r\n      // if file properties are false\r\n      return (\r\n        <div id=\"fileprops-error\" style={{ color: \"red\" }}>\r\n          <br />\r\n          <em>Could not read {props.name} properties..</em>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (id === \"keras-model\") {\r\n      return !metadataReceived ? (\r\n        <em>\r\n          <br />\r\n          Reading model parameters..\r\n        </em>\r\n      ) : (\r\n        <div id=\"model-upload-properties\">\r\n          <em>Specifications found for uploaded model:</em>\r\n          <br />\r\n          Number of input columns: {fileProperties.inp} <br />\r\n          Number of predicted output columns: {fileProperties.out} <br />\r\n          Timesteps used per prediction: {fileProperties.timesteps} <br />\r\n        </div>\r\n      );\r\n    }\r\n    if (id === \"scaler\") {\r\n      return !metadataReceived ? (\r\n        <em>\r\n          <br />\r\n          Reading scaler parameters..\r\n        </em>\r\n      ) : (\r\n        <div id=\"model-upload-properties\">\r\n          <em>Specifications found for uploaded scaler:</em>\r\n          <br />\r\n          Scaler type: {fileProperties.type} <br />\r\n          Number of columns scaled: {fileProperties.features} <br />\r\n          Samples experienced by scaler: {fileProperties.samples} <br />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <div className=\"question-container\">\r\n        <div className=\"tooltip-container\">\r\n          {props.id === \"keras-model\" ? (\r\n            <span className=\"tooltiptext\" id=\"model-tooltip\">\r\n              Keras models are saved in .h5-format, and contain necessary\r\n              weights and biases to predict new values. It is important that\r\n              the model is applied to the same parameters that was used during\r\n              training. The predicted outcome will correspond with chosen\r\n              output columns when training the model. Read more about Keras\r\n              models{\" \"}\r\n              <a\r\n                className=\"tooltip-link\"\r\n                href=\"https://keras.io/api/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                here\r\n              </a>\r\n              .\r\n            </span>\r\n          ) : (\r\n            <span className=\"tooltiptext\" id=\"scaler-tooltip\">\r\n              A scaler is used to normalize data, which is essential when\r\n              different features have different ranges. The application\r\n              supports scalers from sklearn's peprocessing API. Scalers have\r\n              no internal method for saving. Therefore, Python's pickle module\r\n              (.pckl) should be used to pickle the scaler instead. Read more\r\n              about scalers and preprocessing{\" \"}\r\n              <a\r\n                className=\"tooltip-link\"\r\n                href={\r\n                  \"https://scikit-learn.org/stable/modules/classes.\" +\r\n                  \"html#module-sklearn.preprocessing\"\r\n                }\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                here\r\n              </a>\r\n              .\r\n            </span>\r\n          )}\r\n        </div>\r\n        <a className=\"question-tooltip\">?</a>\r\n      </div>\r\n      <div {...getRootProps({ style })} className=\"upload\">\r\n        <input {...getInputProps()} />\r\n        {!uploaded\r\n          ? [\r\n              <div>\r\n                <br />\r\n                Drag and drop {props.name} here,\r\n                <br />\r\n                or click to select from files.\r\n                <br />\r\n                <br />\r\n                <br />(<em>File format must be {str_format}</em>)\r\n              </div>,\r\n            ]\r\n          : [\r\n              <div>\r\n                <br />\r\n                {props.name.charAt(0).toUpperCase() + props.name.slice(1)}\r\n                <div style={{ color: \"rgb(71, 255, 71)\" }}>\r\n                  '{filename}' uploaded.\r\n                </div>\r\n                <br />\r\n                <div>{getFileSummary(props.id)}</div>\r\n              </div>,\r\n            ]}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n","import React from \"react\";\r\nimport \"../styles/main.scss\";\r\n\r\nimport About from \"./About\";\r\nimport ChartDashboard from \"./ChartDashboard\";\r\nimport Header from \"./Header\";\r\nimport ModelSpecifications from \"./ModelSpecifications\";\r\nimport Upload from \"./Upload\";\r\n\r\nexport class Startpage extends React.Component {\r\n  /*\r\n    The startpage component handles all of the interactions between different\r\n    components, and makes sure that the correct components are displayed based\r\n    on user specifications. There are three main display options supported by\r\n    the startpage:\r\n      - Selection page: intended for uploading model and scaler, and providing\r\n        specifications related to inputs and outputs used by the model.\r\n      - Chart dashboard: visualization of real-time values and anomaly\r\n        detection based on the provided model file and scaler.\r\n      - About page: short summary of the purpose of the web application.\r\n  */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedSystem: [],\r\n      selectedInputs: [],\r\n      selectedOutputs: [],\r\n      useSampleFiles: false,\r\n      settingsComplete: false, // determines display\r\n      modelFilename: null,\r\n      scalerFilename: null,\r\n      modelProperties: {\r\n        input: null,\r\n        output: null,\r\n        timesteps: null,\r\n      },\r\n      about: false, // determines display\r\n    };\r\n\r\n    // Bind functions used to receive data from child components:\r\n    this.onModelComplete = this.onModelComplete.bind(this);\r\n    this.onFileUploaded = this.onFileUploaded.bind(this);\r\n    this.onInputsUpdate = this.onInputsUpdate.bind(this);\r\n    this.onOutputsUpdate = this.onOutputsUpdate.bind(this);\r\n    this.onSystemUpdate = this.onSystemUpdate.bind(this);\r\n  }\r\n\r\n  onModelComplete = (modelSelections) => {\r\n    /*\r\n    Executes when model parameters are received from the ModelSpecifications\r\n    child component.\r\n    */\r\n    this.setState({\r\n      selectedSystem: modelSelections[\"selectedSystem\"],\r\n      selectedInputs: modelSelections[\"selectedInputs\"],\r\n      selectedOutputs: modelSelections[\"selectedOutputs\"],\r\n      settingsComplete: true,\r\n    });\r\n  };\r\n\r\n  onFileUploaded = (filename, id) => {\r\n    /*\r\n    Executes when a file has been succesfully uploaded.\r\n    */\r\n    if (id === \"keras-model\") {\r\n      this.setState({ modelFilename: filename });\r\n    }\r\n    if (id === \"scaler\") {\r\n      this.setState({ scalerFilename: filename });\r\n    }\r\n  };\r\n\r\n  onModelProperties = (modelProps) => {\r\n    /*\r\n    Executes when model properties have been constructed in in the Upload\r\n    child component.\r\n    */\r\n    this.setState({ modelProperties: modelProps });\r\n  };\r\n\r\n  setSampleBool = () => {\r\n    /*\r\n    Executes when the user clicks to use sample files. the function only sets\r\n    new states if the useSampleFiles variable was previously false.\r\n    */\r\n    if (!this.state.useSampleFiles) {\r\n      this.setState({\r\n        useSampleFiles: true,\r\n        modelFilename: \"sample_model.h5\",\r\n        scalerFilename: \"sample_scaler.pckl\",\r\n      });\r\n    }\r\n  };\r\n\r\n  resetUploadStates = (id) => {\r\n    /*\r\n    If new upload is instantiated in the Upload child component, reset states\r\n    affected in the Startpage parent.\r\n    */\r\n    if (id === \"keras-model\") {\r\n      this.setState({\r\n        selectedSystem: [],\r\n        selectedInputs: [],\r\n        selectedOutputs: [],\r\n        useSampleFiles: false,\r\n        modelFilename: null,\r\n        modelProperties: {\r\n          input: null,\r\n          output: null,\r\n          timesteps: null,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (id === \"scaler\") {\r\n      this.setState({\r\n        selectedSystem: [],\r\n        selectedInputs: [],\r\n        selectedOutputs: [],\r\n        useSampleFiles: false,\r\n        scalerFilename: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  onSystemUpdate = (selectedSystem) => {\r\n    /*\r\n    Executes if a new system is selected.\r\n    */\r\n    this.setState({ selectedSystem: selectedSystem });\r\n  };\r\n\r\n  onInputsUpdate = (selectedInputs) => {\r\n    /*\r\n    Executes if new inputs are selected.\r\n    */\r\n    this.setState({ selectedInputs: selectedInputs });\r\n  };\r\n\r\n  onOutputsUpdate = (selectedOutputs) => {\r\n    /*\r\n    Executes if new outputs are selected.\r\n    */\r\n    this.setState({ selectedOutputs: selectedOutputs });\r\n  };\r\n\r\n  onAboutClick = () => {\r\n    /*\r\n    Executes on about click.\r\n    */\r\n    this.setState({ about: !this.state.about });\r\n  };\r\n\r\n  render() {\r\n    const settingsComplete = this.state.settingsComplete;\r\n    const useSampleFiles = this.state.useSampleFiles;\r\n    const modelProperties = this.state.modelProperties;\r\n    const selectedSystem = this.state.selectedSystem[0];\r\n    const selectedInputs = this.state.selectedInputs;\r\n    const selectedOutputs = this.state.selectedOutputs;\r\n    const modelFilename = this.state.modelFilename;\r\n    const modelTimesteps = this.state.modelProperties.timesteps;\r\n    const scalerFilename = this.state.scalerFilename;\r\n    const about = this.state.about;\r\n    const showSelectionParameters = !!modelFilename && !!scalerFilename;\r\n    return (\r\n      <div className=\"startpage\">\r\n        <div className=\"about-button-container\">\r\n          <button id=\"about-btn\" onClick={this.onAboutClick}>\r\n            {!about ? \"About\" : \"Back\"}\r\n          </button>\r\n        </div>\r\n        <Header dashboard={settingsComplete} about={about} />\r\n        {about ? (\r\n          <About />\r\n        ) : !settingsComplete ? (\r\n          [\r\n            <div>\r\n              <div id=\"upload-content\">\r\n                <Upload\r\n                  id=\"keras-model\"\r\n                  key=\"keras-model-upload\"\r\n                  name=\"Keras model\"\r\n                  format=\".HDF5,.h5\"\r\n                  sendFilename={(filename, id) =>\r\n                    this.onFileUploaded(filename, id)\r\n                  }\r\n                  useSampleFiles={useSampleFiles}\r\n                  resetProps={(id) => this.resetUploadStates(id)}\r\n                  sendModelProperties={(modelProps) =>\r\n                    this.onModelProperties(modelProps)\r\n                  }\r\n                />\r\n                <Upload\r\n                  id=\"scaler\"\r\n                  key=\"scaler-upload\"\r\n                  name=\"scaler\"\r\n                  format=\".pckl\"\r\n                  sendFilename={(filename, id) =>\r\n                    this.onFileUploaded(filename, id)\r\n                  }\r\n                  useSampleFiles={useSampleFiles}\r\n                  resetProps={(id) => this.resetUploadStates(id)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <p style={{ textAlign: \"center\", color: \"white\" }}>\r\n                  Or use&nbsp;\r\n                  <a\r\n                    className=\"sample-link\"\r\n                    onClick={() => this.setSampleBool()}\r\n                  >\r\n                    sample model and scaler\r\n                  </a>\r\n                </p>\r\n              </div>\r\n              <div className=\"model-selectors-container\">\r\n                {showSelectionParameters ? (\r\n                  <ModelSpecifications\r\n                    inputSignals={modelProperties.inp}\r\n                    outputSignals={modelProperties.out}\r\n                    sendModelSelections={(modelSelections) =>\r\n                      this.onModelComplete(modelSelections)\r\n                    }\r\n                    sendSystemUpdate={(selectedSystem) =>\r\n                      this.onSystemUpdate(selectedSystem)\r\n                    }\r\n                    sendInputsUpdate={(selectedInputs) =>\r\n                      this.onInputsUpdate(selectedInputs)\r\n                    }\r\n                    sendOutputsUpdate={(selectedOutputs) =>\r\n                      this.onOutputsUpdate(selectedOutputs)\r\n                    }\r\n                    useSampleFiles={useSampleFiles}\r\n                  />\r\n                ) : null}\r\n              </div>\r\n            </div>,\r\n          ]\r\n        ) : (\r\n          <ChartDashboard\r\n            system={selectedSystem}\r\n            inputs={selectedInputs}\r\n            outputs={selectedOutputs}\r\n            sampleFiles={useSampleFiles}\r\n            modelFilename={modelFilename}\r\n            modelTimesteps={modelTimesteps}\r\n            scalerFilename={scalerFilename}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Startpage;\r\n","import React from \"react\";\r\nimport \"./styles/main.scss\";\r\nimport Startpage from \"./components/Startpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"content\">\r\n      <div id=\"maincontent\">\r\n        <Startpage />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}